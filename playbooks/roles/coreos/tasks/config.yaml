# deleting and recreating a directory is the standard ansible idiom for emptying out a directory
# since we'll be globbing for files later on we want to ensure that no unintended files make it in
- name: create directory for config fragments
  file:
    path: "{{ coreos_fragments_directory }}"
    state: "{{ item }}"
  loop:
  - absent
  - directory

- name: render internal config fragment
  include_role:
    name: "{{ role_name }}"
    tasks_from: fragment

- name: render external config fragments
  include_role:
    name: "{{ item }}"
    tasks_from: fragment
  loop: "{{ coreos_fragments_from }}"

# if we only have a single file we can skip the overhead of merging the fragments together
- name: list all fragments
  find:
    path: "{{ coreos_fragments_directory }}"
    patterns: ["*.yml", "*.yaml"]
  register: fragments

- name: use single fragment
  when: fragments.matched == 1
  copy:
    remote_src: true
    src: "{{ fragments.files[0].path }}"
    dest: "{{ coreos_config_file }}"

- name: merge fragments
  when: fragments.matched > 1
  block:
  - name: create /opt/bin
    file:
      path: /opt/bin
      state: directory

  - name: install yq
    get_url:
      url: https://github.com/mikefarah/yq/releases/download/{{ yq_version }}/yq_linux_amd64
      dest: /opt/bin/yq
      mode: 0755

  - name: combine config fragments
    args:
      # don't specify creates, otherwise ansible won't run this step at all if containerlinux.yaml exists
      # meaning ansible won't pick up changes to our fragments if this is run multiple times on a host
      # creates: /etc/corebernetes/containerlinux.yaml
    shell: >
      /opt/bin/yq merge --append
      {{ fragments.files | map(attribute='path') | join(' ') }}
      > {{ coreos_config_file }}
